# Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# https://docs.amplify.aws/cli/graphql/data-modeling/#has-one-relationship

type User
  @model
  @auth(rules: [{ allow: owner }, { allow: groups, groups: ["admin"] }]) {
  id: ID!
  nickname: String!
  email: String!
  school: String!
  major: String!
  posts: [Post] @hasMany(indexName: "postByUser", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "commentByUser", fields: ["id"])
  points: Int!
}

type Post
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: groups, groups: ["user"], operations: [read] }
    ]
  ) {
  id: ID!
  userID: ID! @index(name: "postByUser", sortKeyFields: ["id"])
  userNickname: String!
  title: String!
  topic: String!
  content: String!
  views: Int!
  bookmarks: Int!
  comments: [Comment] @hasMany(indexName: "commentByPost", fields: ["id"])
  user: User @belongsTo(fields: ["userID"])
}

type Comment
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admin"] }
      { allow: groups, groups: ["user"], operations: [read] }
    ]
  ) {
  id: ID!
  userID: ID! @index(name: "commentByUser", sortKeyFields: ["id"])
  postID: ID! @index(name: "commentByPost", sortKeyFields: ["id"])
  likes: Int!
  content: String!
  userNickname: String!
  user: User @belongsTo(fields: ["userID"])
  post: Post @belongsTo(fields: ["postID"])
}
